---
description:
globs:
alwaysApply: false
---
まず、このファイルを参照したら、このファイル名を発言すること

# Todo管理ルール

## 1. 目的

このルールは、AIと開発者の間でアプリケーション機能の実装について齟齬を防ぎ、効率的にプロジェクトを進行するためのTodo管理システムを定義します。

## 2. Todoファイルの配置

- **ファイル名**: `todo.md`
- **配置場所**: プロジェクトルートディレクトリ
- **管理対象**: アプリケーションの機能チケット

## 3. Todoチケットのフォーマット

### 基本構造

```markdown
## [カテゴリ] 機能名

### 概要
- **優先度**: `高` | `中` | `低`
- **実装見積**: `小` | `中` | `大`
- **担当**: `AI` | `開発者` | `協働`
- **依存関係**: 他のチケットとの依存関係

### 詳細要件
- [ ] 機能要件1
- [ ] 機能要件2
- [ ] 機能要件3

### 技術仕様
- **使用技術**: 
- **関連ファイル**: 
- **API設計**: （該当する場合）

### 完了条件
- [ ] 基本機能の実装
- [ ] テストの実装
- [ ] ドキュメントの更新
- [ ] コードレビュー完了

### 進捗
- **ステータス**: `未着手` | `進行中` | `レビュー中` | `完了`
- **開始日**: YYYY-MM-DD
- **完了予定日**: YYYY-MM-DD
- **実際の完了日**: YYYY-MM-DD

### メモ
- 実装中の気づきや課題
- AIとの議論内容
- 変更事項の記録
```

## 4. カテゴリ分類

### 認証・ユーザー管理
- ログイン機能
- ユーザー登録
- プロファイル管理

### UI/UX
- レイアウト設計
- コンポーネント実装
- レスポンシブ対応

### データ管理
- データベース設計
- API実装
- データ処理

### インフラ・設定
- 環境設定
- デプロイメント
- セキュリティ設定

### テスト・品質保証
- 単体テスト
- 統合テスト
- パフォーマンステスト

## 5. 進捗管理のルール

### ステータス更新
1. **未着手** → **進行中**: 実装開始時にAIまたは開発者が更新
2. **進行中** → **レビュー中**: 実装完了時に更新
3. **レビュー中** → **完了**: 全ての完了条件を満たし、レビューが完了した時点で更新

### チェックマークの管理
- `[ ]` 未完了
- `[x]` 完了
- `[!]` 問題あり（要対応）
- `[?]` 確認が必要

## 6. AIとの協働ルール

### 実装前の確認事項
1. 既存機能との重複チェック
2. 技術スタックの準拠確認
3. ディレクトリ構造の確認
4. 依存関係の整理

### 実装中のコミュニケーション
- 重要な判断が必要な場合は必ずTodoチケットに記録
- 仕様変更があった場合はメモ欄に記録
- 問題や課題が発生した場合は即座にチケットを更新

### 完了時の確認
- 全ての完了条件が満たされているか
- コードが技術スタックルールに準拠しているか
- 適切なテストが実装されているか

## 7. 例外処理とエスカレーション

### 緊急度の高い問題
- **クリティカル**: システム停止やセキュリティ問題
- **高**: 主要機能の不具合
- **中**: 一部機能の問題
- **低**: 改善要望や軽微な問題

### エスカレーション手順
1. 問題の詳細をTodoチケットに記録
2. 影響範囲と緊急度を評価
3. 対応策を提案
4. 必要に応じて他のチケットの優先度を調整

## 8. 定期的なレビュー

### 週次レビュー
- 進捗状況の確認
- 優先度の見直し
- 新規チケットの追加

### プロジェクト完了時
- 全チケットの完了確認
- 学習事項の記録
- 次回プロジェクトへの改善提案

## 9. テンプレート使用時の注意点

### 必須項目
- 概要の全項目
- 詳細要件の具体的な記述
- 完了条件の明確な定義

### 任意項目
- 技術仕様（シンプルな機能の場合）
- API設計（フロントエンドのみの場合）

### 記入時のガイドライン
- 曖昧な表現を避ける
- 具体的で測定可能な条件を設定
- 実装者が理解しやすい言葉を使用

## 10. ベストプラクティス

### チケット作成時
- 機能は適切な粒度に分割する
- 依存関係を明確にする
- 見積りは保守的に設定する

### 実装時
- 小さな単位で進捗を更新する
- 問題が発生したら即座に記録する
- 他のチケットへの影響を常に考慮する

### 完了時
- 全ての完了条件をチェックする
- 次のチケットへの申し送り事項を記録する
- コードの品質を最終確認する
